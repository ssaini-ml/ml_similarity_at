name: ML Similarity CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Clear Python cache
      run: |
        find . -type d -name "__pycache__" -exec rm -r {} +
        find . -type f -name "*.pyc" -delete
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ --cov=src --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml

  pipeline-test:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Clear Python cache
      run: |
        find . -type d -name "__pycache__" -exec rm -r {} +
        find . -type f -name "*.pyc" -delete
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create test data
      run: |
        mkdir -p data/raw
        # Create a test CSV file with sample data
        echo '"Name Shop","ABDA Name (Hersteller)"' > data/raw/Feature_Engineering_product_details___AT.csv
        echo '"Pharmacy A","Medicine X 100mg"' >> data/raw/Feature_Engineering_product_details___AT.csv
        echo '"Pharmacy B","Medicine Y 200mg"' >> data/raw/Feature_Engineering_product_details___AT.csv
        echo '"Pharmacy C","Medicine Z 150mg"' >> data/raw/Feature_Engineering_product_details___AT.csv
        echo '"Pharmacy D","Medicine X 200mg"' >> data/raw/Feature_Engineering_product_details___AT.csv
        echo '"Pharmacy E","Medicine Y 100mg"' >> data/raw/Feature_Engineering_product_details___AT.csv
    
    - name: Clear processed data
      run: |
        rm -rf data/processed/*
    
    - name: Test Pandas Pipeline
      run: |
        python scripts/run_pipeline_pandas.py
    
    - name: Test Spark Pipeline
      run: |
        python scripts/run_pipeline.py
    
    - name: Test Auto-Select Pipeline
      run: |
        python scripts/run_ml_pipeline.py

  validate:
    needs: [test, pipeline-test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Clear Python cache
      run: |
        find . -type d -name "__pycache__" -exec rm -r {} +
        find . -type f -name "*.pyc" -delete
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate project structure
      run: |
        # Check if required directories exist
        test -d src && echo "src directory exists"
        test -d scripts && echo "scripts directory exists"
        test -d tests && echo "tests directory exists"
        
        # Check if required files exist
        test -f requirements.txt && echo "requirements.txt exists"
        test -f README.md && echo "README.md exists"
        
        # Check if main scripts exist
        test -f scripts/run_pipeline_pandas.py && echo "pandas pipeline exists"
        test -f scripts/run_pipeline.py && echo "spark pipeline exists"
        test -f scripts/run_ml_pipeline.py && echo "ml pipeline exists"
        
        # Check if test data was created
        test -f data/raw/Feature_Engineering_product_details___AT.csv && echo "test data exists"
        echo "Test data contents:"
        cat data/raw/Feature_Engineering_product_details___AT.csv

  deploy:
    needs: [test, pipeline-test, validate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Deploy to Streamlit Cloud
      env:
        STREAMLIT_TOKEN: ${{ secrets.STREAMLIT_TOKEN }}
      run: |
        streamlit deploy app/streamlit_app.py